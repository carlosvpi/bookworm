// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int              @id @default(autoincrement())
  createdAt        DateTime         @default(now())
  name             String
  email            String           @unique
  friends          User[]           @relation("UserFriends")
  friendOf         User[]           @relation("UserFriends")
  readings         Book[]
  messages         Message[]        @relation("MessageAuthor")
  targetedMessages Message[]        @relation("UserTarget")
  assignments      UserAssignment[]
  userClubs        UserClub[]
}

model Club {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  name        String       @db.VarChar(255)
  userClubs   UserClub[]
  assignments Assignment[]
  board       Board        @relation(fields: [boardId], references: [id])
  boardId     Int          @unique
}

model UserClub {
  usserRole UserRole
  user      User     @relation(fields: [userId], references: [id])
  club      Club     @relation(fields: [clubId], references: [id])

  userId Int
  clubId Int

  @@id([userId, clubId])
}

enum UserRole {
  Creator
  Admin
  Member
}

model UserAssignment {
  completed    Boolean    @default(false)
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  assignmentId Int
  user         User       @relation(fields: [userId], references: [id])
  userId       Int

  @@id([userId, assignmentId])
}

model Assignment {
  id          Int              @id @default(autoincrement())
  createdAt   DateTime         @default(now())
  deadline    DateTime
  assignments UserAssignment[]
  book        Book             @relation(fields: [bookId], references: [id])
  bookId      Int
  board       Board            @relation(fields: [boardId], references: [id])
  boardId     Int              @unique
  club        Club             @relation(fields: [clubId], references: [id])
  clubId      Int
}

model Board {
  id         Int         @id @default(autoincrement())
  messages   Message[]   @relation("MessageBoard")
  type       BoardType
  assignment Assignment?
  club       Club?

  // @@check("assignmentId IS NOT NULL OR clubId IS NOT NULL")
  // @@check("assignmentId IS NULL OR clubId IS NULL")
}

enum BoardType {
  ClubBoard
  AssignmentBoard
}

model Book {
  id          Int          @id @default(autoincrement())
  title       String       @db.VarChar(255)
  url         String
  cover       String
  readers     User[]
  assignments Assignment[]
}

model Message {
  id           Int         @id @default(autoincrement())
  content      String
  createdAt    DateTime    @default(now())
  author       User        @relation("MessageAuthor", fields: [authorId], references: [id])
  authorId     Int
  type         MessageType
  board        Board?      @relation("MessageBoard", fields: [boardId], references: [id])
  boardId      Int?
  userTarget   User?       @relation("UserTarget", fields: [userTargetId], references: [id])
  userTargetId Int?

  // @@check("userTargetId IS NOT NULL OR boardId IS NOT NULL")
  // @@check("userTargetId IS NULL OR boardId IS NULL")
}

enum MessageType {
  BoardMessage
  DirectMessage
}
